#SQL external name Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: ExternalName
  externalName: mysql-freetier-tb.cmqqgelvhttx.us-east-1.rds.amazonaws.com
---
#Stacksimplogy microservices
apiVersion: apps/v1
kind: Deployment
metadata:
  name: usermgmt-microservice
  #labels:
    #app: usermgmt-restapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usermgmt-restapp
  template:  
    metadata:
      labels:
        app: usermgmt-restapp
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "Checking for the availability of MySQL Server deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e "  >> MySQL DB Server has started";']      
      containers:
        - name: usermgmt-restapp
          image: stacksimplify/kube-usermanagement-microservice:1.0.0  
          ports:
            - containerPort: 8095           
          env:
            - name: DB_HOSTNAME
              value: "mysql-freetier-tb.cmqqgelvhttx.us-east-1.rds.amazonaws.com"            
            - name: DB_PORT
              value: "3306"            
            - name: DB_NAME
              value: "mysqldb"                       
            - name: DB_USERNAME
              value: "admin"                    
            - name: DB_PASSWORD
              valueFrom:                           
                secretKeyRef:
                  name: mysql-db-password    
                  key: db-password     
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - nc -z localhost 8095
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /usermgmt/health-status
              port: 8095
            initialDelaySeconds: 60
            periodSeconds: 10
---
#Secret Pod
apiVersion: v1
kind: Secret
metadata:
  name: mysql-db-password
type: Opaque
data:
  db-password: ZGJwYXNzd29yZDEx
---
#NodePort Services
apiVersion: v1
kind: Service
metadata:
  name: usermgmt-restapp-nodeport-service
  labels:
    app: usermgmt-restapp
spec:
  type: NodePort
  selector:
    app: usermgmt-restapp
  ports:
    - port: 8095
      targetPort: 8095
---
#Deploy Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-usermgmt-restapp-service
  labels:
    app: usermgmt-restapp
  annotations:
    # Ingress Core Settings
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance


    # Health Check Settings
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /usermgmt/health-status
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/success-codes: '200'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
spec:
  rules:
    - http:
        paths:
          #- path: /usermgmt
          - path: /usermgmt
            pathType: Prefix
            backend:
              service:
                name: usermgmt-restapp-nodeport-service
                port:
                  number: 8095
          - path: /adminer
            pathType: Prefix
            backend:
              service:
                name: adminer-service-nodeport
                port:
                  number: 80
---
#Adminer - Deployment Pods
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer
spec:
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
      - name: adminer
        image: adminer:4.8.1
        ports:
          - containerPort: 8080
---
#Adminer - Nodeport Service/
apiVersion: v1
kind: Service
metadata:
  name: adminer-service-nodeport
spec:
  type: LoadBalancer
  selector:
    app: adminer
  ports:
    - port: 80                
      targetPort: 8080 
      protocol: TCP